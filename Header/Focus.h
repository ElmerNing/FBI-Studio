#ifndef _FOCUS_H_
#define _FOCUS_H_

#ifdef  CHIP_DM642
#include <csl.h>
#include <csl_irq.h>
#include <csl_gpio.h>
#include <csl_emifa.h>
#include <csl_edma.h>
#include <csl_vp.h>
#include <csl_dat.h>
#include <csl_mcbsp.h>
#include <csl_timer.h>
#include <csl_cache.h>
#include "..\Header\FocusDriverStructDef.h"
#endif

#include <math.h>
#include <string.h>
#include <stdlib.h>

#include "..\Header\FocusTypeDef.h"
#include "..\Header\FocusStructDef.h"

#ifndef NULL
#define  NULL                         0
#endif

#define  IMG_FRAME_SIZE               720                                                  //cis每行采集的像素点

#ifdef  CHIP_DM642
///////////////////////////////CPU核心模块声明////////////////////////////////////////////////////////////////////////////////////////

extern KernelObj g_class_kernelObj ;                                                      //系统提供的默认内核配置对象，根据硬件改变
/**********************************************************************************************************************************/
/* 函数 : KERNEl_init						                                                                                      */
/* 输入(s) :内核配置结构对象的指针                                                                                                */
/* 描述 :   对芯片进行配置，包括软件环境配置,外部存储器接口配置等片上外设初始化                                                   */
/**********************************************************************************************************************************/
extern int     KERNEL_init(KernelHandle hKernelObj);

/**********************************************************************************************************************************/
/* 函数 : KERNEl_enalbleCache						                                                                              */
/* 输入(s) :Cache模式类型，枚举类型，在Foucus.h中定义                                                                             */
/* 描述 :   对系统的Cache缓存进行设置                                                                                             */
/**********************************************************************************************************************************/
extern void KERNEL_enalbleCache(CACHEMODE cacheMode);
////////////////////////////////LED灯模块声明/////////////////////////////////////////////////////////////////////////////////////////

extern LedObj g_class_ledObj;                                                            //系统提供的默认LED配置对象，根据硬件改变
extern void    LED_init(LedHandle hledHandle);
extern void    LED_open();
extern void    LED_close();
////////////////////////////////图像采集模块声明/////////////////////////////////////////////////////////////////////////////////////////
//extern volatile short		FocusRunWatchStatus;		/*!< 码盘停止信号 0 - stop 1 - run */
extern volatile int            g_class_line;
extern volatile int            g_class_imageEndFlag;
extern  IMG_BuffObj    g_class_pDoing;
extern IMG_Obj g_class_img_double_Obj; //系统提供的默认绿光和红外透射图像采集模块配置对象 ,根据硬件改变，检假算法要用此对象进行配置                                         
extern IMG_Obj g_class_img_single_Obj; //系统提供的默认400行绿光透射像采集模块配置对象 ,根据硬件改变，系列号算法要用此对象进行配置 
extern IMG_Obj g_class_img_triple_Obj; //系统提供的默认400行绿光透射像采集模块配置对象 ,根据硬件改变，系列号算法要用此对象进行配置 
extern IMG_Obj g_class_img_ggr_Obj; //系统提供的默认400行绿光透射像采集模块配置对象 ,根据硬件改变，系列号算法要用此对象进行配置 

/*!
 * 函数 : IMG_init						                                       
 * @ imgHandle : 采集模块结构对象指针,系统提供了默认对象                  
 * @ cms : 当前处理模式                                                          
 * 描述 :  对图象采集模块涉及的硬件进行配置,以及采集平台系统变量,中断的初始化      
 */
extern int IMG_init(IMG_Handle imgHandle,CisModeStatus cms);
////////////////////////////////主控通信模块声明/////////////////////////////////////////////////////////////

extern COMM_Obj g_class_comm_Obj;                                                       //系统提供的默认主控通信配置对象，根据硬件改变
/********************************************************************************************************/
/* 函数 : COMM_init						                                                                */
/* 输入(s) :主控通信模块结构对象指针,系统提供了默认对象                                                 */
/* 描述 :  对主控通信模块涉及的硬件进行配置                                                             */
/********************************************************************************************************/
extern int  COMM_init(COMM_Handle commHandle);
/********************************************************************************************************/
/* 函数 : COMM_getDataFromMCU						                                                    */
/* 输入(s) :从主控获取的0-65536之间的一个参数                                                           */
/* 描述 :  从主控获取命令,返回整型数，暂提供两个命令,0x64:要求DSP发送具体批次系列号，批次由value给出,   */
/*         0x94:要求DSP清空系列号缓冲区队列                                                             */
/********************************************************************************************************/
extern int  COMM_getDataFromMCU(int *value);
/********************************************************************************************************/
/* 函数 : COMM_sendDataToMCU						                                                    */
/* 输入(s) :SendBuffer：需要发送给主控的数据缓冲区; len:发送数据的大小                                  */
/* 描述 :   向主控发送一定字节的数据，返回小于0的数表示发送失败                                         */
/*                                                                                                      */
/********************************************************************************************************/
extern int  COMM_sendDataToMCU(Uint8 *SendBuffer,int len);
/********************************************************************************************************/
/* 函数 : COMM_receive						                                                            */
/* 输入(s) :空                                                                                          */
/* 描述 :  获取主控-->DSP通信线的电平状态 ,0是低电平 1是高电平                                          */
/********************************************************************************************************/
extern int  COMM_receive();
/********************************************************************************************************/
/* 函数 : COMM_send						                                                                */
/* 输入(s) :输入电平                                                                                    */
/* 描述 :  向DSP-->主控通信线输入电平，0为低电平,1为高电平                                              */
/********************************************************************************************************/
extern void COMM_send(int status);

////////////////////////////////USB通信模块声明/////////////////////////////////////////////////////////////

extern  USB_Obj   g_class_usbObj;                                                       //系统提供的默认USB通信配置对象，根据硬件改变
/********************************************************************************************************/
/* 函数 : USB_init						                                                                */
/* 输入(s) :USB通信模块配置对象指针，系统默认提供                                                       */
/* 描述 :   USB芯片初始化，以及USB通信模块平台变量初始化                                                */
/********************************************************************************************************/
extern  int       USB_init(USB_Handle usbHandle);

/************************************************\
 * 函数 : USB_sendImageToPC
 * 输入(s) :IMG_BuffObj 图像存储缓冲区
 * len图象缓冲区笮?                                              
 * mode : 1-3,光源数目; 16,序列号发送数据 
 * 描述 :   向PC客户端发送采集到的图像      
\************************************************/
extern  int       USB_sendImageToPC( IMG_BuffObj imageBufferObj,int len,int mode);
extern  int       USB_getPcAck();
extern  int       USB_getIsDataToPcComplete();
#endif
#endif

